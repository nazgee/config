# we need some helpers from ip_aliases
source "`dirname $BASH_SOURCE`/../ip.alias"

function pasa-adb-export() {
        local VDIIP="`ifconfig | grep -A 1 tap0 | tail -n1 | awk "-F " '{print $2 }'`"

        if [ -z "$VDIIP" ]; then
                echo "NoMachine port sharing not enabled." > /dev/stderr
                echo "" > /dev/stderr
                echo "Press ctrl+alt+0 and go to \"Devices-> Connect a network port -> Local ports -> Add a network port\"." > /dev/stderr
                echo "Share TCP 5038:5038 if you want your local adb shared with VDI." > /dev/stderr
                echo "When done, invoke ${FUNCNAME[0]} to force adb to connect to adb deamon :5038 on your local system." > /dev/stderr
                return 1
        fi

        local IP1=`nazgee-previp "$VDIIP"`
        local IP2=`nazgee-nextip "$VDIIP"`

        # kill local server on 5038 (in case it runs)
        adb -P 5038 kill-server -H localhost > /dev/null 2>&1

        # try first IP
        if adb -P 5038 -H $IP1 devices > /dev/null 2>&1; then
                export ADB_SERVER_SOCKET=tcp:$IP1:5038
                echo  "ADB_SERVER_SOCKET=tcp:$IP1:5038 (this will allow you to use your local adb from VDI)" > /dev/stderr
        # try second IP
        elif adb -P 5038 -H $IP2 devices > /dev/null 2>&1; then
                export ADB_SERVER_SOCKET=tcp:$IP2:5038
                echo  "ADB_SERVER_SOCKET=tcp:$IP2:5038 (this will allow you to use your local adb from VDI)" > /dev/stderr
        # give up
        else
                echo "Can't connect to adb host on $IP1:5038 or $IP2:5038." > /dev/stderr
                echo "Have you started \"adb -a -P 5038 nodaemon server start\" on your machine?" > /dev/stderr
        fi
}


function pasa-aosp-package-out() {
    cd "$OUT"
    local TARGZNAME="`cat build_fingerprint.txt | awk -F "/" '{print $2 }'`-`date +'%d-%m-%y-%H:%M'`"
    if [ -n "$1" ]; then
        TARGZNAME="`cat build_fingerprint.txt | awk -F "/" '{print $2 }'`-$1"
    fi
    local TEMP=`mktemp -d -t $TARGZNAME-XXX`
    echo "`pwd`/$TARGZNAME.tar.gz"

    # ignore folder and archives, copy rest to temporary dir
    ls --file-type | grep -v ".*/" | grep -v "\.tar\.gz" | xargs -I{} cp {} "$TEMP"
    # compress
    tar -c --use-compress-program=pigz -f "$TARGZNAME.tar.gz" "$TEMP"
    # cleanup
    rm "$TEMP" -rf
    cd -
}

function pasa-aosp-package-out-upload() {
    cd "$OUT"
    local TARGZNAME="`cat build_fingerprint.txt | awk -F "/" '{print $2 }'`-`date +'%d-%m-%y-%H:%M'`"
    if [ -n "$1" ]; then 
        TARGZNAME="`cat build_fingerprint.txt | awk -F "/" '{print $2 }'`-$1"
    fi
    local TEMP=`mktemp -d -t $TARGZNAME-XXX`
    echo "`pwd`/$TARGZNAME.tar.gz"

    # ignore folder and archives, copy rest to temporary dir
    ls --file-type | grep -v ".*/" | grep -v "\.tar\.gz" | xargs -I{} cp {} "$TEMP"
    # compress
    tar -c --use-compress-program=pigz -f "$TARGZNAME.tar.gz" "$TEMP"
    # cleanup
    rm "$TEMP" -rf
    
    nexus.sh --up "$TARGZNAME.tar.gz"
    cd -
}

function pasa-aosp-gki-kernel-clean() {
   if [[ -z "${ANDROID_BUILD_TOP}" ]]; then
      echo "missing android build env"
   else
      cd "${ANDROID_BUILD_TOP}"
      echo "deleting GKI artifacts"
      rm kernel_platform/out/ -rf
      rm ./device/qcom/msmnile-kernel/ -rf
   fi
}
